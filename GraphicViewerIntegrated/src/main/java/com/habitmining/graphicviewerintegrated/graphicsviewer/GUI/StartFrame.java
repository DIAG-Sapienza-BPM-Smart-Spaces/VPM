package com.habitmining.graphicviewerintegrated.graphicsviewer.GUI;

import com.habitmining.graphicviewerintegrated.graphicsviewer.Utility.LogLine;
import com.habitmining.graphicviewerintegrated.graphicsviewer.Utility.Sensor;
import com.habitmining.graphicviewerintegrated.graphicsviewer.Utility.Utility;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Giovanni
 */
public class StartFrame extends javax.swing.JFrame { 
    private final static String LOAD_IMAGE_CHOOSER_DESCRIPTION = "Image file";
    
    private final static String LOAD_SENSORS_CHOOSER_DESCRIPTION = "Sensor file";
    private final static String[] LOAD_SENSORS_CHOOSER_FILE = {"csv"};
    
    private final static String LOAD_TASK_CHOOSER_DESCRIPTION = "Task file";
    private final static String[] LOAD_TASK_CHOOSER_FILE = {"t1", "t2", "t3", "t4", "t5"};
   
    private final static Color CORRECT_COLOR = new Color(0, 153, 51);
    private final static Color ERROR_COLOR = new Color(204, 0, 0);
    
    private final static String MESSAGE_OPEN_FILE_TITLE = "Loading Error";
    private final static String MESSAGE_EMPTY_FIELD_DESCRIPTION = "There are empty fields.";
    private final static String MESSAGE_INVALID_FILE_DESCRIPTION = "Some errors occurred during the loading of the selected files.";
    
    private final static String EXIT_MESSAGE_TITLE = "Exit Confirmation";
    private final static String EXIT_MESSAGE_DESCRIPTION = "Some simulation are opened.\nDo you want to close the application?";
                        

    private String path_image;
    private String path_sensors;
    private File[] path_logs;
    
    public ArrayList<SimulationFrame> simulation_frame_list = new ArrayList<>();
    
    
    /**
     * Creates new form StartFrame
     * @param applicationTitle
     */
    public StartFrame(String applicationTitle) {
        super(applicationTitle);

        path_image = null;
        path_sensors = null;
        path_logs = null;
        
        initComponents();
        
        // create the listener for the button
        StartFrameActionListener listener = new StartFrameActionListener();
        load_image_button.addActionListener(listener);
        load_sensors_button.addActionListener(listener);
        load_log_button.addActionListener(listener);
        open_button.addActionListener(listener);
        join_check_box.addActionListener(listener);
    }
    
    public void removeClosedFrame(SimulationFrame s) {
        simulation_frame_list.remove(s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        log_text_field = new javax.swing.JTextField();
        image_text_field = new javax.swing.JTextField();
        open_button = new javax.swing.JButton();
        load_image_button = new javax.swing.JButton();
        load_sensors_button = new javax.swing.JButton();
        load_log_button = new javax.swing.JButton();
        sensor_text_field = new javax.swing.JTextField();
        join_check_box = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        log_text_field.setEditable(false);
        log_text_field.setBackground(ERROR_COLOR);
        log_text_field.setText(StartFrameActionListener.LOAD_LOG_NO_IMPORT);
        log_text_field.setFocusable(false);

        image_text_field.setEditable(false);
        image_text_field.setBackground(ERROR_COLOR);
        image_text_field.setText(StartFrameActionListener.LOAD_IMAGE_NO_IMPORT);
        image_text_field.setFocusable(false);

        open_button.setText(StartFrameActionListener.OPEN_BUTTON_NAME);
        open_button.setActionCommand(StartFrameActionListener.OPEN_BUTTON_COMMAND);
        open_button.setFocusable(false);
        open_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_buttonActionPerformed(evt);
            }
        });

        load_image_button.setText(StartFrameActionListener.LOAD_IMAGE_BUTTON_NAME);
        load_image_button.setActionCommand(StartFrameActionListener.LOAD_IMAGE_BUTTON_COMMAND);
        load_image_button.setFocusable(false);

        load_sensors_button.setText(StartFrameActionListener.LOAD_SENSORS_BUTTON_NAME);
        load_sensors_button.setActionCommand(StartFrameActionListener.LOAD_SENSORS_BUTTON_COMMAND);
        load_sensors_button.setFocusable(false);

        load_log_button.setText(StartFrameActionListener.LOAD_LOG_BUTTON_NAME);
        load_log_button.setActionCommand(StartFrameActionListener.LOAD_LOG_BUTTON_COMMAND);
        load_log_button.setFocusable(false);

        sensor_text_field.setEditable(false);
        sensor_text_field.setBackground(ERROR_COLOR);
        sensor_text_field.setText(StartFrameActionListener.LOAD_SENSORS_NO_IMPORT);
        sensor_text_field.setFocusable(false);

        join_check_box.setText(StartFrameActionListener.JOIN_TASK_CHECK_BOX_NAME);
        join_check_box.setActionCommand(StartFrameActionListener.JOIN_TASK_CHECK_BOX_COMMAND);
        join_check_box.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(load_image_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(image_text_field))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(load_sensors_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sensor_text_field))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(load_log_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 412, Short.MAX_VALUE)
                                .addComponent(join_check_box))
                            .addComponent(log_text_field)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(open_button)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load_image_button)
                    .addComponent(image_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load_sensors_button)
                    .addComponent(sensor_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load_log_button)
                    .addComponent(log_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(join_check_box)
                .addGap(18, 18, 18)
                .addComponent(open_button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int confirm = JOptionPane.OK_OPTION;
        if( !simulation_frame_list.isEmpty() ) {
            Toolkit.getDefaultToolkit().beep();
            confirm = JOptionPane.showOptionDialog(
                    null, EXIT_MESSAGE_DESCRIPTION, EXIT_MESSAGE_TITLE, JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, null, null
            );
        }

        if( confirm == JOptionPane.OK_OPTION ) System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void open_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_buttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_open_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField image_text_field;
    private javax.swing.JCheckBox join_check_box;
    private javax.swing.JButton load_image_button;
    private javax.swing.JButton load_log_button;
    private javax.swing.JButton load_sensors_button;
    private javax.swing.JTextField log_text_field;
    private javax.swing.JButton open_button;
    private javax.swing.JTextField sensor_text_field;
    // End of variables declaration//GEN-END:variables

    private class StartFrameActionListener implements ActionListener {  
        private final static String LOAD_IMAGE_BUTTON_COMMAND = "Load Image Button Command"; 
        private final static String LOAD_SENSORS_BUTTON_COMMAND = "Load Sensor Command";
        private final static String LOAD_LOG_BUTTON_COMMAND = "Load log Command"; 
        private final static String OPEN_BUTTON_COMMAND = "Open Button Command"; 
        private final static String JOIN_TASK_CHECK_BOX_COMMAND = "Join Loaded Tasks"; 
        
        private final static String LOAD_IMAGE_BUTTON_NAME = "Insert Image";    
        private final static String LOAD_SENSORS_BUTTON_NAME = "Insert Sensors";
        private final static String LOAD_LOG_BUTTON_NAME = "Insert Log";
        private final static String OPEN_BUTTON_NAME = "Open";
        private final static String JOIN_TASK_CHECK_BOX_NAME = "Join Tasks";

        private final static String LOAD_IMAGE_IMPORT = "Image file selected";
        private final static String LOAD_IMAGE_NO_IMPORT = "No image file selected";
        private final static String LOAD_SENSORS_IMPORT = "Sensor file selected";
        private final static String LOAD_SENSORS_NO_IMPORT = "No sensors file selected";
        private final static String LOAD_LOG_IMPORT = "Log file selected";
        private final static String LOAD_LOG_NO_IMPORT = "No log file selected";
        
        private File current_directory;
        
        public StartFrameActionListener() {
            current_directory = null;
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(current_directory);

            if( command.equals(LOAD_IMAGE_BUTTON_COMMAND) ) { // open JFileChooser to load the image file path
                executeImageCommand( chooser );
            } else if( command.equals(LOAD_SENSORS_BUTTON_COMMAND) ) { // open JFileChooser to load the sensor file path
                executeSensorCommand( chooser );
            } else if( command.equals(LOAD_LOG_BUTTON_COMMAND) ) { // open JFileChooser to load the log file path
                executeLogCommand( chooser );
            } else if( command.equals(OPEN_BUTTON_COMMAND) ) { // open the new frame
                // chek if all fields are correctly inserted
                if( path_image == null || path_sensors == null || path_logs == null ) {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(
                            StartFrame.this, MESSAGE_EMPTY_FIELD_DESCRIPTION,
                            MESSAGE_OPEN_FILE_TITLE, JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                
                // open the new frame
                try {
                    
                    executeOpenCommand();
                } catch(Exception ex) {
                    Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(
                            StartFrame.this, MESSAGE_INVALID_FILE_DESCRIPTION,
                            MESSAGE_OPEN_FILE_TITLE, JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
        
        
        private void executeImageCommand(JFileChooser chooser) {
            FileFilter ff = new FileNameExtensionFilter( LOAD_IMAGE_CHOOSER_DESCRIPTION, ImageIO.getReaderFileSuffixes());
            chooser.addChoosableFileFilter( ff );
            chooser.setFileFilter( ff );
            chooser.setAcceptAllFileFilterUsed(false);

            int returnValue = chooser.showOpenDialog(StartFrame.this);
            if(returnValue == JFileChooser.APPROVE_OPTION) {
                path_image = chooser.getSelectedFile().getAbsolutePath();

                image_text_field.setText(LOAD_IMAGE_IMPORT +": "+ chooser.getSelectedFile().getName());
                image_text_field.setBackground(CORRECT_COLOR);

                current_directory = chooser.getSelectedFile().getParentFile();
            }
        }
        
        
        private void executeSensorCommand(JFileChooser chooser) {
            FileFilter ff = new FileNameExtensionFilter(LOAD_SENSORS_CHOOSER_DESCRIPTION, LOAD_SENSORS_CHOOSER_FILE);
            chooser.addChoosableFileFilter( ff );
            chooser.setFileFilter( ff );
            chooser.setAcceptAllFileFilterUsed(false);

            int returnValue = chooser.showOpenDialog(StartFrame.this);
            if(returnValue == JFileChooser.APPROVE_OPTION) {
                path_sensors = chooser.getSelectedFile().getAbsolutePath();

                sensor_text_field.setText(LOAD_SENSORS_IMPORT +": "+ chooser.getSelectedFile().getName());
                sensor_text_field.setBackground(CORRECT_COLOR);

                current_directory = chooser.getSelectedFile().getParentFile();
            }
        }
        
        
        private void executeLogCommand(JFileChooser chooser) {
            chooser.setMultiSelectionEnabled(true);
            for(String task : LOAD_TASK_CHOOSER_FILE) {
                String description = LOAD_TASK_CHOOSER_DESCRIPTION + " " + task;
                chooser.addChoosableFileFilter(new FileNameExtensionFilter(description, task) );
            }

            int returnValue = chooser.showOpenDialog(StartFrame.this);
            if(returnValue == JFileChooser.APPROVE_OPTION) {
               path_logs = chooser.getSelectedFiles();
               String s = "";
               for( int n = 0; n < path_logs.length; n++ ) {
                   if(n == 0)  s += LOAD_LOG_IMPORT +": ";
                   else  s += " - ";
                   s += path_logs[n].getName();
               }

               log_text_field.setText(s);
               log_text_field.setBackground(CORRECT_COLOR);

               current_directory = chooser.getSelectedFile().getParentFile();
            }
        }
        
        private void executeOpenCommand() throws FileNotFoundException, ParseException, Exception {
            com.habitmining.graphicviewerintegrated.promutils.ToolsProm.appendInFile("timeReport.txt", "Start Preprocessing Complete: " + System.currentTimeMillis());

            if( join_check_box.isSelected() ) {
                String temporaryTaskName = "";
                String[] paths = new String[path_logs.length];
                for(int n = 0; n < path_logs.length; n++) {
                    File fileLog = path_logs[n];
                    if( n > 0 ) temporaryTaskName += "_";
                    temporaryTaskName += fileLog.getName();
                    paths[n] = fileLog.getAbsolutePath();
                }

                final String taskName = temporaryTaskName;
                final ImageIcon backgroundImage = Utility.loadImage(path_image);
                final HashMap<String, Sensor> sensorMap = Utility.loadSensors(path_sensors);
                final List<LogLine> logsList = Utility.loadLogs(paths, sensorMap.keySet());
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        SimulationFrame s = new SimulationFrame(StartFrame.this, taskName, backgroundImage, sensorMap, logsList);
                        simulation_frame_list.add(s);
                        s.setVisible(true);
                    }
                });
            } else {
                for(File fileLog : path_logs) {    
                    final String taskName = fileLog.getName();
                    final ImageIcon backgroundImage = Utility.loadImage( path_image );
                    final HashMap<String, Sensor> sensorMap = Utility.loadSensors( path_sensors );

                    final List<LogLine> logsList = Utility.loadLog( fileLog.getAbsolutePath(), sensorMap.keySet() );
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            SimulationFrame s = new SimulationFrame(StartFrame.this, taskName, backgroundImage, sensorMap, logsList);
                            simulation_frame_list.add(s);
                            s.setVisible(true);
                        }
                    });
                }
            }
            
            com.habitmining.graphicviewerintegrated.promutils.ToolsProm.appendInFile("timeReport.txt", "End Preprocessing Complete: " + System.currentTimeMillis());

        }
    } 
    
}

